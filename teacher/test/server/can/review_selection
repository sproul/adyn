<html><header><!-- chosenCategories=cpp;randomSeed=3444;exerciseType=vocab_selected;exerciseSetTargetSize=4;promptLang=Q;userID=TEST_review_selection -->  <title>Teacher</title></header>
<body bgcolor=#cccccc><font face='arial'><script language=JavaScript src=../teacher/html/new.js></script><applet codebase=../teacher/html name=teacher code=teacher.class width=1 height=1></applet><script language="JavaScript">
var adyn_url_offset='../teacher/html/'
var cookieInitStr='teacherCookie.whichPanel = "simple_choose.htm";teacherCookie.lang_Q_checked = "true";teacherCookie.lang_A_checked = "true";teacherCookie.lang_French_checked = "false";teacherCookie.lang_Spanish_checked = "false";teacherCookie.lang_Italian_checked = "false";teacherCookie.lang_German_checked = "false";'
// exerciseType=vocab_selected, chosenTenses=undef, chosenTopics=1, canonizedTest=0, exerciseTargetCnt=4, reviewExerciseTargetCnt=2
se('cpp_101','Q',"<h3>[18.7] Does &quot;<tt>Fred&amp;&nbsp;const&nbsp;x</tt>&quot; make any sense?</h3>",'','A',"<p>No, it is nonsense. <p>To find out what the above declaration means, <a href=../teacher/html/\"const-correctness.html#[18.5]\">you have to read it right-to-left<!--rawtext:[18.5]:rawtext--></a>. Thus &quot;<tt>Fred&amp;&nbsp;const&nbsp;x</tt>&quot; means &quot;<tt>x</tt> is a <tt>const</tt> reference to a <tt>Fred</tt>&quot;. But that is redundant, since references are always <tt>const</tt>. <a href=../teacher/html/\"references.html#[8.4]\">You can't reseat a reference<!--rawtext:[8.4]:rawtext--></a>. Never. With or without the <tt>const</tt>. <p>In other words, &quot;<tt>Fred&amp;&nbsp;const&nbsp;x</tt>&quot; is functionally equivalent to &quot;<tt>Fred&amp;&nbsp;x</tt>&quot;. Since you're gaining nothing by adding the <tt>const</tt> after the <tt>&amp;</tt>, you shouldn't add it since it will confuse people. I.e., the <tt>const</tt> will make some people think that the <tt>Fred</tt> is <tt>const</tt>, as if you had said &quot;<tt>const&nbsp;Fred&amp;&nbsp;x</tt>&quot;. <p><small>[&nbsp;<a href=../teacher/html/\"#top\">Top</a> |&nbsp;<a href=../teacher/html/\"#bottom\">Bottom</a> |&nbsp;<a href=../teacher/html/\"exceptions.html\">Previous&nbsp;section</a> |&nbsp;<a href=../teacher/html/\"basics-of-inheritance.html\">Next&nbsp;section</a> ]</small> <hr width=\"100%\" > <p><a name=\"[18.8]\"></a>",'')
se('cpp_129','Q',"<h3>[22.1] What's the big deal of separating interface from implementation?</h3>",'','A',"<p>Interfaces are a company's most valuable resources. Designing an interface takes longer than whipping together a concrete class which fulfills that interface. Furthermore interfaces require the time of more expensive people. <p>Since interfaces are so valuable, they should be protected from being tarnished by data structures and other implementation artifacts. Thus you should separate interface from implementation. <p><small>[&nbsp;<a href=../teacher/html/\"#top\">Top</a> |&nbsp;<a href=../teacher/html/\"#bottom\">Bottom</a> |&nbsp;<a href=../teacher/html/\"proper-inheritance.html\">Previous&nbsp;section</a> |&nbsp;<a href=../teacher/html/\"strange-inheritance.html\">Next&nbsp;section</a> ]</small> <hr width=\"100%\" > <p><a name=\"[22.2]\"></a>",'')
se('cpp_110','Q',"<h3>[19.3] How do you express inheritance in C++?</h3>",'','A',"<p>By the <tt>:&nbsp;public</tt> syntax: <p><code> &nbsp;&nbsp;&nbsp;&nbsp;class&nbsp;Car&nbsp;:&nbsp;public&nbsp;Vehicle&nbsp;&#123;<br> &nbsp;&nbsp;&nbsp;&nbsp;public:<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</tt><em>//&nbsp;...</em><tt><br> &nbsp;&nbsp;&nbsp;&nbsp;&#125;; </code> <p>We state the above relationship in several ways: <ul> <li><tt>Car</tt> is &quot;a kind of a&quot; <tt>Vehicle</tt></li> <li><tt>Car</tt> is &quot;derived from&quot; <tt>Vehicle</tt></li> <li><tt>Car</tt> is &quot;a specialized&quot; <tt>Vehicle</tt></li> <li><tt>Car</tt> is the &quot;subclass&quot; of <tt>Vehicle</tt></li> <li><tt>Vehicle</tt> is the &quot;base class&quot; of <tt>Car</tt></li> <li><tt>Vehicle</tt> is the &quot;superclass&quot; of <tt>Car</tt> (this not as common in the C++ community)</li> </ul> <p>(Note: this FAQ has to do with <tt>public</tt> inheritance; <a href=../teacher/html/\"private-inheritance.html\"><tt>private</tt> and <tt>protected</tt> inheritance<!--rawtext:[24]:rawtext--></a> are different.) <p><small>[&nbsp;<a href=../teacher/html/\"#top\">Top</a> |&nbsp;<a href=../teacher/html/\"#bottom\">Bottom</a> |&nbsp;<a href=../teacher/html/\"const-correctness.html\">Previous&nbsp;section</a> |&nbsp;<a href=../teacher/html/\"virtual-functions.html\">Next&nbsp;section</a> ]</small> <hr width=\"100%\" > <p><a name=\"[19.4]\"></a>",'')
se('cpp_128','Q',"<h3>[21.9] But my problem doesn't have anything to do with circles and ellipses, so what good is that silly example to me?</h3>",'','A',"<p>Ahhh, there's the rub. You <em>think</em> the <tt>Circle</tt>/<tt>Ellipse</tt> example is just a silly example. But in reality, <em>your</em> problem is an isomorphism to that example. <p>I don't care what your inheritance problem is, but all (yes <em>all</em>) bad inheritances boil down to the <tt>Circle</tt>-is-not-a-kind-of-<tt>Ellipse</tt> example. <p>Here's why: Bad inheritances always have a base class with an extra capability (often an extra member function or two; sometimes an extra promise made by one or a combination of member functions) that a derived class can't satisfy. You've either got to make the base class weaker, make the derived class stronger, or eliminate the proposed inheritance relationship. I've seen lots and lots and lots of these bad inheritance proposals, and believe me, they all boil down to the <tt>Circle</tt>/<tt>Ellipse</tt> example. <p>Therefore, if you truly understand the <tt>Circle</tt>/<tt>Ellipse</tt> example, you'll be able to recognize bad inheritance everywhere. If you don't understand what's going on with the <tt>Circle</tt>/<tt>Ellipse</tt> problem, the chances are high that you'll make some very serious and very expensive inheritance mistakes. <p>Sad but true. <p>(Note: this FAQ has to do with <tt>public</tt> inheritance; <a href=../teacher/html/\"private-inheritance.html\"><tt>private</tt> and <tt>protected</tt> inheritance<!--rawtext:[24]:rawtext--></a> are different.) <p><small>[&nbsp;<a href=../teacher/html/\"#top\">Top</a> |&nbsp;<a href=../teacher/html/\"#bottom\">Bottom</a> |&nbsp;<a href=../teacher/html/\"virtual-functions.html\">Previous&nbsp;section</a> |&nbsp;<a href=../teacher/html/\"abcs.html\">Next&nbsp;section</a> ]</small> <hr width=\"100%\" > <a name=\"bottom\"></a> <a href=../teacher/html/\"mailto:cline@parashift.com\"><img src=\"mbox.gif\" border=2 height=26 width=89>&nbsp;E-mail the author</a><br> [&nbsp;<a href=../teacher/html/\"index.html\"><em>C++ FAQ Lite</em></a> |&nbsp;<a href=../teacher/html/\"index.html#table-of-contents\">Table&nbsp;of&nbsp;contents</a> |&nbsp;<a href=../teacher/html/\"subject-index.html\">Subject&nbsp;index</a> |&nbsp;<a href=../teacher/html/\"copy-permissions.html#[1.1]\">About&nbsp;the&nbsp;author</a> |&nbsp;<a href=../teacher/html/\"copy-permissions.html#[1.2]\">&copy;</a> |&nbsp;<a href=../teacher/html/\"on-line-availability.html#[2.2]\">Download&nbsp;your&nbsp;own&nbsp;copy</a>&nbsp;]<br> <small>Revised Sep 8, 1997</small>",'')
function init()
{
ia("cpp_101/1118;cpp_129;cpp_110/1117;cpp_128","cpp",101,window.name,"TEST_review_selection")
}
onload=init
</script>
</font>
</body></html>
Nelson is setting binmode to 0: c:/perl/lib/CGI.pm
Nelson is setting binmode to 0: c:/perl/lib/CGI.pm
Nelson is setting binmode to 0: c:/perl/lib/CGI.pm
Nelson is setting binmode to 0: c:/perl/lib/CGI.pm
Nelson is setting binmode to 0: c:/perl/lib/CGI.pm
adyn_cgi_util::MailAdyn(choose.cgi exercises selected TEST_review_selection, cpp_101/1118;cpp_129;cpp_110/1117;cpp_128): would mail adyn if I were on unix
