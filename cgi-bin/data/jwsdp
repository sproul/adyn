@val = (
{
'A' => 'as opposed to jaxp: ',
'Q' => 'q<br>how many CPUs are available<br>a<br>java.lang.Runtime.availableProcessors()<br>&nbsp;&nbsp;&nbsp;&nbsp;q<br>jwsdp<br>&nbsp;&nbsp;a<br>Java Web services developer pack: a collection of<br>tools for development of Web services, intended<br>as an answer to Microsoft\'s .NET<br>q<br>jaxp<br>a<br>Java API for XML processing: although there were<br>already standard interfaces for transforming and<br>parsing XML, there were no standard interfaces<br>for obtaining the transformers and parsers. This<br>gap is now filled.<br>q<br>soap<br>a<br>simple object access protocol: jaxm -- Java API<br>for XML messaging -- provides a standard<br>interface to soap 1.1<br>q<br>some overlap<br>a<br>between jaxm and jaxp. you end up changing<br>representations in an inelegant fashion<br>&nbsp;&nbsp;q<br>SOAP-based messages for rpc<br>a<br>Java API for XML based remote procedure calls -<br>jax-rpc.<br>q<br>contrast soap with rmi<br>a<br>rmi uses low level Java-based binary protocols<br>(or CORBA IIOP)which are faster but less<br>interoperative than XML<br>6<br>q<br>how to find Web services<br>a<br>use registries. Java API for XML registries --<br>jaxr, provides an abstract interface for querying<br>registries. The two possible registries are:<br>universal description discovery and integration<br>(UDDI) and ebXML (electronic business using<br>XML)registry and repository<br>&nbsp;&nbsp;q<br>another Java registry<br>a<br>Java naming and directory interface -- jndi --<br>provides a simple registry. So at a minimal<br>level, there is functional overlap, but really<br>jaxr provides a much richer set of stuff<br>&nbsp;&nbsp;q<br>Java secure communication<br>7<br>a<br>Java secure socket extension -- jsse<br>q<br>reference implementation of JSP and servlet standards<br>a<br>&nbsp;Apache Jakarta tomcat -- probably not suitable<br>for production, because it does not provide<br>failover, reliable message delivery, and it does<br>not provide enterprise JavaBeans<br>q<br>Java: execute a process<br>a<br>java.lang.Runtime.exec()<br>&nbsp;&nbsp;q<br>14<br>jaxp models for processing XML<br>a<br>1. sax -- simple API for XML: event driven parsing<br>2. dom -- document object model: tree parsing<br>&nbsp;&nbsp;q<br>17<br>sax events<br>a<br>&nbsp;&nbsp;doc, elt, char<br>&nbsp;&nbsp;you capture these events by overriding methods in<br>&nbsp;&nbsp;your instance of the ContentHandler object (derived<br>&nbsp;&nbsp;from the standard DefaultHandler)<br>&nbsp;&nbsp;public void startElement(String uri, String localName, String qName, Attributes aAttribs)<br>&nbsp;&nbsp;uri is the unique universal resource ID for the namespace (if name spaces are enabled)<br>qName includes the namespace prefix. usually what you want is localName.<br>&nbsp;&nbsp;&nbsp;&nbsp;q<br>28<br>sax originally included its own parser factory<br>a<br>but only jaxp\'s parser factory supports the<br>switching in and out of different sax parsers<br>with no code changes<br>q<br>Java: how much free memory is available<br>a<br>long java.lang.Runtime.freeMemory()<br>&nbsp;&nbsp;&nbsp;&nbsp;q<br>30<br>some sax parsers<br>a<br>xerces 1: sax 2.0 compliant but does not support jaxp<br>crimson: originally designed by Sun<br>xerces 2: comes with jaxp 1.2<br>&nbsp;&nbsp;q<br>input to the sax parser<br>a<br>InputSource(uri)<br>q<br>37<br>sax trace output<br>a<br>(supported by most, but not all sax parsers:)<br>you override the setDocumentLocator(Locator loc)<br>you save loc away<br>loc.getLineNumber()<br>loc.getColumnNumber()<br>q<br>sequence of calls to instantiate parser (direct SAX)<br>a<br>SAXParserFactory factory = SAXParserFactory.newInstance();<br>SAXParser parser = factory.newSAXParser();<br>&nbsp;&nbsp;q<br>64<br>&nbsp;&nbsp;a ',
'id' => 0,
},
{
'A' => 'features: bool attribs which control parser behavior, are set via factory<br>&nbsp;&nbsp;properties: control parser state, and are set via the parser ',
'Q' => 'not thrdsafe. Either protect or have one factory/thrd<br>DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();<br>DocumentBuilder parser = factory.newDocumentBuilder();<br>q<br>38<br>jaxp: enable DTD validation<br>a<br>performance hit<br>javax/xml/parsers/DocumentBuilderFactory.setValidating(true)<br>&nbsp;&nbsp;to enable name spaces: factory.setNamespaceAware(true)<br>q<br>what is the maximum memory Java will use<br>a<br>long java.lang.Runtime.maxMemory()<br>&nbsp;&nbsp;q<br>39<br>&nbsp;&nbsp;jaxp: parser capabilities<br>a ',
'id' => 1,
},
{
'A' => 'if (no dtd) ',
'Q' => 'feature and property names all have the format<br>"http://xml.org/sax/features/..." or<br>"http://xml.org/sax/properties/..."<br>q<br>43<br>jaxp: how is white space dealt with ',
'id' => 2,
},
{
'A' => 'else ',
'Q' => 'a<br>ContentHandler.characters() will be given whitespace ',
'id' => 3,
},
{
'A' => 'extend Exception with your own class whose<br>constructor takes a String key argument; use that<br>key to return the appropriate value from the<br>getLocalizedMessage() method: ',
'Q' => 'parser reports significant white space to ContentHandler.characters(),<br>insignificant to ContentHandler.ignorableWhiteSpace()<br>&nbsp;&nbsp;q<br>45<br>jaxp: XML processing instructions are handled by what method<br>a<br>ContentHandler.processingInstruction(...)<br>&nbsp;&nbsp;q<br>jaxp: how are errors reported<br>a<br>via SAX ErrorHandler interface, which defines<br>methods: fatalError(), error(), warning()<br>&nbsp;&nbsp;q<br>jaxp: DefaultHandler<br>a<br>reports fatal errors, ignores the rest<br>q<br>46<br>&nbsp;&nbsp;sax2 extensions<br>a<br>LexicalHandler has distinct events for entities<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;and CDATA characters, unlike ContentHandler<br>DeclHandler reports element, attribute and entity declarations<br>DTDHandler reports notation declarations, and unparsed entities<br>&nbsp;&nbsp;q<br>jaxp: threads<br>a<br>sax parsers are not thread safe<br>&nbsp;&nbsp;q<br>51<br>sax v. dom<br>a<br>sax is faster and lighter weight<br>q<br>jaxp: garbage characters coming through?<br>a<br>make sure character encoding is correct<br>default is UTF-8<br>&nbsp;&nbsp;q<br>jaxp: IE compensates for minor errors<br>a<br>make sure there\'s no whitespace before the XML declaration<br>q<br>58<br>dom objex<br>&nbsp;&nbsp;a<br>6<br>Document<br>Element (tag)<br>Text<br>Attribute<br>Node<br>NodeList<br>&nbsp;&nbsp;q<br>java: load a DLL<br>a<br>long java.lang.Runtime.loadLibrary()<br>&nbsp;&nbsp;q<br>XML DOM objex: attr<br>a<br>inherits from Node, but isn\'t a node (ie, null<br>parent, null siblings, etc)<br>&nbsp;&nbsp;q<br>67<br>jaxp: parser attributes<br>&nbsp;&nbsp;a<br>javax/xml/parsers/DocumentBuilderFactory.java:<br>factory.setCoalescing(bool) -- convert CDATA into Text + append to any adjacent Text<br>factory.setExpandEntityReferences(bool)<br>factory.setIgnoringComments(bool)<br>q<br>74<br>url -&gt; InputStream<br>&nbsp;&nbsp;a<br>URL url = new URL(s)<br>URLConnection connection = url.openConnection();<br>InputStream is = connection.getInputStream();<br>q<br>76<br>jaxp: must external entities be resolved?<br>a<br>no. But Apache Xerxes does resolve<br>&nbsp;&nbsp;q<br>jaxp: external entity sources: implement<br>a<br>InputSource org.xml.sax.helpers.DefaultHandler.resolveEntity() to find \'em<br>q<br>94<br>how does a JSP get the value of a form field?<br>a<br>HttpServlet.doGet(HttpServletRequest request, HttpServletResponse response)<br>...<br>request.getParameter(formFieldName)<br>q<br>how do you make a critical section of Java code thread safe?<br>a<br>synchronized(this)<br>&#123;<br>...<br>&#125;<br>q<br>110<br>115<br>what if you do XMLReader.setFeature() with an unknown feature?<br>a<br>SAXNotRecognizedException or<br>SAXNotSupportedException<br>q<br>116<br>do jaxp parsers have a standard set of features?<br>a<br>no.<br>q<br>122<br>can I append a node to any other node in a DOM tree?<br>&nbsp;&nbsp;a<br>yes, except for Text nodes, which can\'t be appended to<br>q<br>124<br>xsl<br>a<br>extensible stylesheet language<br>&nbsp;&nbsp;q<br>xsl: two flavors exist:<br>a<br>xslt = xsl for transformations<br>xslfo = xsl formatting objects, a specification<br>for controlling the formatting a printed<br>documents<br>q<br>how does xsl locate tags, elements, attributes within a document?<br>a<br>XPath is the recommendation used to accomplish<br>these tasks<br>q<br>126<br>how to invoke xsl from XML?<br>a<br>&lt;?xml-stylesheet type="text/xsl" href="whatever.xsl" ?&gt;<br>q<br>129<br>xpath<br>a<br>is a language for addressing parts of an XML<br>document, designed to be used by both XSLT and<br>XPointer<br>&nbsp;&nbsp;q<br>XPointer<br>a<br>XPointer extends XPath, supports addressing into the internal<br>structures of XML documents. It allows for<br>examination of a hierarchical document structure<br>and choice of its internal parts based on various<br>properties, such as element types, attribute<br>values, character content, and relative position.<br>&nbsp;&nbsp;<a href=\'http://www.foo.org/bar.xml#xpointer\'>http://www.foo.org/bar.xml#xpointer</a>(article/section[position()&lt;=5])<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q<br>xpath wildcards<br>a<br>// -&gt; path to all nodes<br>* -&gt; like in sh<br>&nbsp;&nbsp;eg, match all text nodes throughout: //text<br>q<br>129<br>xpath "axes"<br>&nbsp;&nbsp;a<br>12<br>// = ancestor<br>ancestor-or-self<br>@ = attribute -- i.e., an XML attribute of the current node<br>descendant<br>descendant-or-self<br>following<br>following-sibling<br>namespace -- namespace child nodes within the current node<br>.. = parent<br>preceding<br>preceding-sibling<br>. = self<br>&nbsp;&nbsp;&nbsp;&nbsp;q<br>130<br>call xsl "function"<br>a<br>&lt;xsl:template match="node" mode="mode" name="name"&gt;<br>&lt;xsl:apply-template select="/" mode="mode" name="name"&gt;<br>q<br>xsl flow control<br>a<br>&lt;xsl:if&gt;<br>&lt;xsl:for-each&gt;<br>&lt;xsl:choose&gt; ,&lt;xsl:when&gt; ,&lt;xsl:otherwise&gt;<br>q<br>xsl: sorting an XML document<br>a<br>&lt;xsl:sort&gt;<br>q<br>xsl: retrieve the value of a node<br>a<br>&lt;xsl:value-of&gt;<br>&lt;xsl:output...<br>...method="_what_" encoding="ISO-8859-1"<br>standalone="yes"&gt;<br>_what_ in &#123;HTML,XML,TEXT,QName&#125;<br>139<br>q<br>xsl engines<br>a<br>SAXON, Xalan have proprietary interfaces.<br>JAX-P originates from a previous project called TrAX<br>&nbsp;&nbsp;q<br>jax-p supports swapping xsl engines<br>a<br>import javax.xml.transform.*;<br>TransformerFactory factory = TransformerFactory.newInstance()<br>Transformer transformer = factory.newTransformer()<br>Templates template = factory.newTemplates()<br>q<br>144<br>&nbsp;&nbsp;xslt i/o<br>&nbsp;&nbsp;a<br>objects supporting Source, Result interfaces;<br>which are really DOMSource or DOMResult or<br>SAXSource or SAXResult or StreamSource or<br>StreamResult<br>q<br>jax-p: can you add your own Source/Result objects<br>a<br>no. The engine actually looks at the types in<br>order to figure out what to do with them<br>q<br>jax-p: how do you pass parameters to xsl<br>a<br>Transformer.setParameter() sets data which can be<br>retrieved using &lt;xsl:param...&gt;<br>q<br>146<br>149<br>jax-p: transformers are not thread safe. And<br>parsing the xsl can be a performance bottleneck.<br>a<br>so use templates instead<br>Source xslSource = new StreamSource(xslFn)<br>Templates templates = transformerFactory.newTemplates(xslSource)<br>Transformer transformer = templates.newTransformer()<br>q<br>152<br>jax-p xsl errors<br>a<br>by default they go to standard error or create an ErrorListener eL, and do<br>javax/xml/transform/transformer.setErrorListener(eL)<br>&nbsp;&nbsp;or<br>&nbsp;&nbsp;javax/xml/transform/transformerFactory.setErrorListener(eL)<br>q<br>153<br>where was the error in the xsl source?<br>a<br>when the xsl engine encounters an error, it<br>builds a SourceLocator object giving a file,<br>line, and column number<br>q<br>when xsl refers to an external document, how is it found?<br>a<br>Source URIResolver.resolve(String href, String<br>base) is supposed to figure out where this item<br>is. there is a default behavior analogous to the<br>resolution of links within an HTML page.<br>however, perhaps you might want all references to<br>be resolved in your web site (e.g., like when the<br>context is computation within my resume, I always<br>want information to be drawn from www.adyn.com).<br>this can be easily accomplished by defining your<br>own URIResolver.<br>&nbsp;&nbsp;another case where it would be valuable is where<br>the xsl files all live in some particular place<br>which is not especially related to the default<br>working directory.<br>q<br>jax-p thread safety<br>a<br>Transformer and TransformerFactory are not.<br>Templates is.<br>q<br>160<br>jstl<br>a<br>JSP standard tag library comes from the Apache<br>Jakarta project<br>it consists of eight libraries: (regular and<br>expression language versions) x (xml, structured<br>language support, SQL support,<br>internationalization)<br>q<br>mvc in the Java realm<br>a<br>servlet is the controller, jsp is the view,<br>various JavaBeans constitute the model<br>q<br>supported expression languages<br>a<br>spel -- simplest possible expression language<br>&nbsp;&nbsp;ECMAScript is a standardized scripting language<br>which has its roots in JavaScript (this is the<br>default expression language)<br>&nbsp;&nbsp;JXPath uses XPath to retrieve values<br>q<br>class file disassembler<br>a<br>javap<br>displays the class file in terms of JVM instruction set by codes<br>q<br>spel: if no attr scope is specified<br>a<br>the attribute is located as defined by the<br>PageContext.findAttribute(), searching through<br>page, request, session, and application<br>q<br>jstl SPEL variable notation<br>a<br>$&#123;...&#125;, e.g., &lt;c:out value="$&#123;param:username&#125;"/&gt;<br>q<br>164<br>how do you determine which expression language<br>is used?<br>a<br>as of the Java servlet specification 2.2, Web servers must support the<br>"web.xml" deployment descriptor. within this deployment descriptor<br>this preference can be set<br>q<br>165<br>set expression language<br>temporarily within the code:<br>a<br>&lt;c:expressionLanguageclass="org.apache.taglibs.standard.lang.spel.ExpressionEvaluatorClass"&gt;<br>&nbsp;&nbsp;...<br>&lt;/c:expressionLanguageclass&gt;<br>&nbsp;&nbsp;supposedly this on-the-fly capability may be eliminated if jstl<br>standardizes on a single expression language<br>&nbsp;&nbsp;q<br>ant install makes an application available<br>a<br>but only for the current Tomcat run. if tomcat is restarted, it will<br>not be available.<br>ant deploy makes applications permanently available<br>&nbsp;&nbsp;&nbsp;&nbsp;q<br>jstl tag library prefixes<br>a<br>core -- c:<br>SQL -- sql:<br>i18n -- fmt:<br>XML -- x:<br>q<br>jsp: it looks like JavaBeans attributes<br>a<br>&nbsp;which have set/get methods can be referred to as<br>variables in the EL<br>q<br>169<br>JSP print JavaBean person.getFn()<br>a<br>&lt;c:out value=$&#123;session:person.fn&#125;"/&gt;<br>q<br>jstl equivalent of perl print<br>&nbsp;&nbsp;a<br>&lt;c:out value= ...&gt;<br>evaluates value and sends the result to the<br>JspWriter object of the currently executing jsp<br>q<br>170<br>change an attribute value from the EL<br>a<br>&lt;c:set var="name" scope="page"&gt;<br>&lt;%= request.getRequestURI() %&gt;<br>&lt;/c:set&gt;<br>q<br>jstl: iterate through a collection<br>a<br>1. datatype must (6)<br>be primitive array<br>or support Java.util.Collection or<br>java.util.Iterator or<br>java.util.Enumeration or<br>java.util.Map<br>or be a String containing comma delimited fields<br>&nbsp;&nbsp;2. &lt;c:forEach var="whatever"<br>items="$&#123;departments&#125;"&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;e.g., &lt;c:out value=$&#123;whatever&#125;"/&gt;<br>&lt;/c:forEach&gt;<br>&nbsp;&nbsp;3. c:forTokens<br>&nbsp;&nbsp;q<br>EL flow control<br>173<br>a<br>&lt;c:if test="$&#123;session:sessionData.loggedIn ==<br>true&#125;"&gt;<br>...<br>&lt;/c:if&gt;<br>&nbsp;&nbsp;c:choose<br>c:when<br>c:otherwise<br>&nbsp;&nbsp;q<br>jstl: importing external resources<br>a<br>&lt;c:import url="..."&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;c:param name="..." value="..."/&gt;<br>&lt;/c:import&gt;<br>&nbsp;&nbsp;standard jsp import cannot refer to a url which<br>is external to the current Web application; but<br>this jstl import can.<br>q<br>175<br>jstl: encode a URL<br>a<br>c:urlEncode<br>q<br>EL interface to redirect<br>a<br>&lt;c:redirect<br>results in HttpServletResponse.sendRedirect()<br>being called<br>q<br>176<br>&lt;sql: setup SQL driver<br>a<br>&lt;sql:driver can do it, but it is recommended that<br>the servlet take care of this itself<br>&lt;sql: execute a query<br>sql:query<br>sql:param<br>sql:update<br>sql:transaction<br>q<br>182<br>i18n<br>a<br>define a resource bundle for each supported<br>language<br>q<br>how is a locale specified?<br>a<br>1. browser preference<br>2. explicitly by the Web application<br>jsp: &lt;fmt:locale<br>q<br>jstl: define the TimeZone<br>a<br>&lt;fmt:timeZone<br>q<br>185<br>jstl: specify a resource bundle<br>a<br>1. context parameter in the web.xml deployment<br>descriptor<br>&lt;context-param&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;param-name&gt;<br>&nbsp;&nbsp;javax.servlet.jsp.jstl.i18n.basename<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/param-name&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;param-value&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i18n.Messages<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/param-value&gt;<br>&lt;/context-param&gt;<br>2. &lt;fmt:bundle<br>q<br>how is a resource bundle selected automatically<br>a<br>by parsing the bundle\'s filename, which ends with<br>1. language (de)<br>2. country (DE)<br>3. variant -- specific to a particular vendor or<br>browser<br>q<br>jstl: retrieve from the resource bundle<br>a<br>&lt;fmt:message key="lskdfj"/&gt;<br>q<br>jstl: construct a message<br>a<br>&lt;fmt:message key="lskdfj"/&gt;<br>&lt;fmt:messageArg value="lskdfj"/&gt;<br>&lt;fmt:messageArg value="lskdfj"/&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;...<br>&lt;/fmt:message&gt;<br>q<br>exception localization<br>a ',
'id' => 4,
},
{
'A' => '4<br>can only send point-to-point<br>only synchronous<br>cannot function as a service; only as a client<br>can only communicate with a running service ',
'Q' => 'ResourceBundle rb = ResourceBundle.getBundle("i18n.ErrorMessages");<br>return rb.getString(savedKey);<br>q<br>191<br>jstl: output a number with the correct formatting<br>a<br>&lt;fmt:formatNumber value="$&#123;number&#125;"<br>type="currency" parseLocale="de_DE"/&gt;<br>&nbsp;&nbsp;other types: number, percentage<br>q<br>jstl: parse an int, handling the appropriate formatting<br>a<br>&lt;fmt:parseNumber...<br>&nbsp;&nbsp;q<br>jstl: read in, write out dates<br>a<br>&lt;fmt:formatDate...<br>&lt;fmt:parseDate...<br>&nbsp;&nbsp;q<br>195<br>jstl: fetch data from an XML document into __node__ variable<br>a<br>&lt;x:parse var="target"<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xml fragment<br>&lt;/x:parse&gt;<br>&nbsp;&nbsp;or<br>&nbsp;&nbsp;&lt;x:parse var="target" source="xml_source"&gt;<br>&nbsp;&nbsp;q<br>jstl: print data from an XML document<br>a<br>&lt;x:out select="$&#123;library/book/isbn&#125;"/&gt;<br>&nbsp;&nbsp;q<br>jstl: fetch data from an XML document into a __simple__ variable<br>a<br>&lt;x:set var="target" select="$&#123;library/book/isbn&#125;"/&gt;<br>&nbsp;&nbsp;q<br>224<br>how do you create a SOAP message obj<br>a<br>get a MessageFactory:<br>&nbsp;&nbsp;// for standalone applications:<br>MessageFactory messageFactory = MessageFactory.newInstance();<br>&nbsp;&nbsp;// OR for code running within a container (e.g., j2ee server) -- known as a "provider" in jaxm lingo,<br>// use the ProviderConnection object:<br>ProviderConnection.createMessageFactory(String profile)<br>&nbsp;&nbsp;&nbsp;&nbsp;SOAPMessage message = messageFactory.createMessage()<br>&nbsp;&nbsp;q<br>what does the initial soap message look like?<br>&nbsp;&nbsp;a<br>it\'s a SOAPMessage object with a SOAPPart which contains the SOAPEnvelope object which contains a SOAPHeader which has properties according to the MessageFactory\'s profile -- so it differs, eg for ebXML v. regular SOAP<br>&nbsp;&nbsp;SOAPBody<br>&nbsp;&nbsp;these components can be represented as XML:<br>&nbsp;&nbsp;&lt;soap-env:Envelope<br>xmlns:soap-env="http://schemas.xmlsoap.org/soap/envelope/"&gt;<br>&lt;soap-env:Header/&gt;<br>&lt;soap-env:Body/&gt;<br>&lt;/soap-env:Envelope/&gt;<br>&nbsp;&nbsp;q<br>226<br>&nbsp;&nbsp;add an attachment to a SOAP message<br>&nbsp;&nbsp;a<br>AttachmentPart attachmentPart = SOAPMsg.createAttachmentPart();<br>attachmentPart.setContent(content, "text/plain");<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;or<br>attachmentPart.setContent(new FileInputStream("x.jpg"), "image/jpeg");<br>&nbsp;&nbsp;q<br>how does an attachment part handle content?<br>&nbsp;&nbsp;a<br>AttachmentPart contains a javax.activation.DataHandler<br>q<br>231<br>limitations on stand-alone SOAP applications<br>&nbsp;&nbsp;a ',
'id' => 5,
},
{
'A' => 'program using jaxm<br>&nbsp;&nbsp;SOAPConnectionFactory scf = SOAPConnectionFactory.newInstance();<br>SOAPConnection connection = scf.createConnection();<br>SOAPMessageFactory mf = SOAPMessageFactory.newInstance();<br>SOAPMessage request = mf.createMessage();<br>// load up request with the specifics ...<br>SOAPPart part = request.getSOAPPart();<br>SOAPEnvelope envelope = part.getEnvelope();<br>SOAPBody body = envelope.getBody();<br>SOAPElement requestElement = body.addChildElement(envelope.createName("GetValueByName", "myns", "...uri..."));<br>SOAPElement paramElement = body.addChildElement("parameter_name");<br>paramElement.addTextNode("parameter_value");<br>SOAPMessage reply = connection.call(request, new URLEndpoint("http://host/servlet"))<br>&nbsp;&nbsp;SOAPPart part = reply.getSOAPPart();<br>SOAPEnvelope envelope = part.getEnvelope();<br>SOAPBody body = envelope.getBody();<br>if (body.hasFault())<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...<br>else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Iterator valueRequests = body.getChildElements(envelope.createName("GetValueByName", "myns", "...uri..."));<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (valueRequests.hasNext())<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#123; ',
'Q' => '(whereas a provider would have a store and forward mechanism)<br>q<br>234<br>sequence of steps for a stand-alone SOAP<br>a ',
'id' => 6,
},
{
'A' => 'client: create an instance of the stub class<br>client: invocation<br>stub class: create SOAP message<br>stub class: sends http<br>server: hands off incoming http to XML-RPC listener<br>server: listener parses the SOAP message, calls the tie class<br>server: listener converts the tie class response into XML<br>server: sends response via http<br>client: stub class receives response, parses XML, constructs response ',
'Q' => 'Iterator params = body.getChildElements(envelope.createName("value"));<br>while (params.hasNext())<br>&#123;<br>SOAPElement element = params.next();<br>String value = element.getValue();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;q<br><a href=\'http://www-106.ibm.com/developerworks/webservices/library/ws-spmyths.html:\'>http://www-106.ibm.com/developerworks/webservices/library/ws-spmyths.html:</a><br>&nbsp;&nbsp;.NET SOAP is polluted<br>&nbsp;&nbsp;a<br>Microsoft has included support for some proprietary data types<br>outside of the standard. for example, Microsoft\'s BigDecimal is not<br>compatible with the type of the same name in the Apache SOAP<br>implementation. To maintain interoperability, it is thus required<br>that you stick to the primitive data types which everyone can agree<br>on.<br>&nbsp;&nbsp;q<br>256<br>what you call the process of communication between<br>applications exchanging data within an enterprise?<br>a<br>application to application = a2a<br>or<br>enterprise application integration = eai<br>q<br>265<br>jaxm: how do you get a provider?<br>&nbsp;&nbsp;a<br>[a "provider" is a container, as far as jaxm is concerned]<br>&nbsp;&nbsp;1. to get a specific provider: use jndi:<br>Context context = new InitialContext();<br>ProviderConnectionFactory factory = context.lookup("the specific name of the provider in the registry");<br>&nbsp;&nbsp;2. to get a default provider<br>ProviderConnectionFactory factory =<br>ProviderConnectionFactory.newInstance();<br>q<br>267<br>asynchronous communication<br>connection.send(requestMessage);<br>a<br>so no endpoint is given for the destination. It<br>all depends on what the profile thinks. The<br>profile will have arranged for certain SOAP<br>header fields to be set. The provider may be<br>maintaining a set of correspondences between SOAP<br>message URI\'s and destination URL\'s.<br>q<br>an assumption of JAXM on the server side<br>a<br>JAXMServlet extends HttpServlet, and so it<br>implicitly assumes that you are going to be<br>running on Http. but if you don\'t want to do<br>this, you do not have to extend JAXMServlet; the<br>real requirement is that you implement either the<br>OnewayListener or the ReqRespListener<br>&nbsp;&nbsp;q<br>steps for XML-RPC<br>306 ',
'id' => 7,
},
{
'A' => 'jar tvf TicTacToe.jar<br>&nbsp;&nbsp;For example, the verbose output for the TicTacToe JAR file would<br>look similar to this:<br>&nbsp;&nbsp;&nbsp;256 Mon Apr 20 10:50:28 PDT 1998 META-INF/MANIFEST.MF<br>3885 Mon Apr 20 10:49:50 PDT 1998 TicTacToe.class ',
'Q' => 'standard for XML documents used to describe a Web service<br>a<br>&nbsp;&nbsp;wsdl files, generated by the tool xrpcc.sh or xrpcc.bat or wsdeploy<br>&nbsp;&nbsp;the input to this tool is an XML file which tells the interface<br>which describes the service, and also gives the name of the<br>concrete class which will implement the interface. In the<br>example, the interface is websvc.ILibrary, and the concrete<br>implementation is websvc.LibraryImpl. xrpcc generates the<br>needed classes.<br>q<br>mvc for jsp<br>a<br>model is the data and the EJB or Java wrapper<br>view is jsp: shows the interface to the user<br>controller is the servlet: receiving user actions and acting<br>&nbsp;&nbsp;q<br><a href=\'http://java.sun.com/docs/books/tutorial/jar/basics/index.html\'>http://java.sun.com/docs/books/tutorial/jar/basics/index.html</a><br>&nbsp;&nbsp;To run an application packaged as a JAR file<br>a<br>(version 1.2 -- requires Main-Class manifest header) java -jar<br>app.jar<br>&nbsp;&nbsp;q<br>To invoke an applet packaged as a JAR file<br>a<br>&nbsp;&lt;applet code=AppletClassName.class<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;archive="JarFileName.jar"<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width=width height=height&gt;<br>&lt;/applet&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;q<br>do a ls -l on a jar file<br>a ',
'id' => 8,
},
{
'A' => '4<br>Applications bundled as JAR files ',
'Q' => '0 Wed Apr 15 16:39:32 PDT 1998 audio/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...<br>q<br>manifest filename<br>a<br>it always has the pathname META-INF/MANIFEST.MF<br>&nbsp;&nbsp;q<br>the checksum value for a file in a manifest is called the "Digest" value<br>&nbsp;&nbsp;what can manifest entries accomplish<br>a ',
'id' => 9,
},
{
'A' => 'Download extensions ',
'Q' => 'define the main entry point for a jar which will be executed as an application<br>&nbsp;&nbsp;Main-Class: classname ',
'id' => 10,
},
{
'A' => 'Package sealing ',
'Q' => 'resets class path to include other jars<br>&nbsp;&nbsp;Class-Path: servlet.jar infobus.jar acme/beans.jar ',
'id' => 11,
},
{
'A' => 'Package versioning ',
'Q' => 'A package within a JAR file can be optionally sealed, which means that all classes defined in that package must be archived in the same JAR file. ',
'id' => 12,
},
{
'A' => '1.1 platform:<br>You can run applications that are bundled as JAR files by using<br>the JDKTM 1.1 jre tool:<br>jre -cp app.jar MainClass<br>&nbsp;&nbsp;1.2 platform only<br>&nbsp;&nbsp;java -jar jar-file<br>&nbsp;&nbsp;The -jar flag tells the interpreter that the application is<br>packaged in the JAR file format.<br>&nbsp;&nbsp;&nbsp;&nbsp;the manifest must detail the entry point ',
'Q' => 'This example shows all the versioning headers:<br>Name: java/util/<br>Specification-Title: "Java Utility Classes"<br>Specification-Version: "1.2"<br>Specification-Vendor: "Sun Microsystems, Inc.".<br>Implementation-Title: "java.util"<br>Implementation-Version: "build57"<br>Implementation-Vendor: "Sun Microsystems, Inc."<br>&nbsp;&nbsp;q<br>A package can be sealed by...<br>a<br>adding to the manifest the Sealed header beneath the header naming the package that\'s to be sealed.:<br>&nbsp;&nbsp;Name: myCompany/myPackage/<br>Sealed: true<br>&nbsp;&nbsp;q<br>create a custom manifest<br>a<br>jar cmf manifest-addition jar-file input-file(s)<br>&nbsp;&nbsp;The m option indicates that you want to merge information from<br>an existing manifest file into the manifest file of the JAR file<br>you\'re creating.<br>&nbsp;&nbsp;q<br>how to run Applications Packaged in JAR Files<br>&nbsp;&nbsp;a ',
'id' => 13,
},
{
'A' => 'if( fpath.startsWith("/"))<br>&nbsp;&nbsp;this.systemId= "file://" + fpath;<br>else<br>&nbsp;&nbsp;this.systemId = "file:///" + fpath; ',
'Q' => 'Main-Class: classname<br>q<br>how do you sign a jar file<br>a<br>1.1 javakey<br>1.2 jarsigner<br>&nbsp;&nbsp;a keystore is a database of passwords.<br>jarsigner needs a keystore password, as well as an alias and the<br>password for the alias<br>&nbsp;&nbsp;q<br>verify a signed jar file<br>a<br>1.2 jarsigner<br>&nbsp;&nbsp;&nbsp;&nbsp;q<br>what are the elements of a signed jar<br>&nbsp;&nbsp;a<br>When a JAR file is signed, a signature file generated in<br>META-INF<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Signature-Version: 1.0<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SHA1-Digest-Manifest: h1yS+K9T7DyHtZrtI+LxvgqaMYM=<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Created-By: SignatureFile JDK 1.2<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Name: test/classes/ClassOne.class<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SHA1-Digest: fcav7ShIG6i86xPepmitOVo4vWY=<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;...<br>&nbsp;&nbsp;the signature contains a digest value for the entire manifest<br>(SHA1-Digest-Manifest header above).<br>&nbsp;&nbsp;When a signed JAR file is being verified, the digests of each of<br>its files are re-computed and compared with the digests recorded<br>in the manifest to ensure that the contents of the JAR file<br>haven\'t changed since it was signed. As an additional check,<br>digest values for the manifest file itself are re-computed and<br>compared against the values recorded in the signature file.<br>&nbsp;&nbsp;You can read additional information about signature files on the<br>Manifest Format page of the JDKTM documentation.<br>&nbsp;&nbsp;The Signature Block File is placed in the META-INF directory<br>when a JAR file is signed. signature block files are not<br>human-readable.<br>&nbsp;&nbsp;q<br>The signature block file contains<br>&nbsp;&nbsp;a<br>1.<br>the digital signature for the JAR file that was generated with<br>the signer\'s private key<br>2.<br>the certificate containing the signer\'s public key, to be used<br>by anyone wanting to verify the signed JAR file<br>&nbsp;&nbsp;Signature block filenames typically will have a .DSA extension<br>indicating that they were created by the default Digital<br>Signature Algorithm<br>&nbsp;&nbsp;q<br>JAR URL format<br>a<br>specified by the java.net.JarURLConnection:<br>&nbsp;&nbsp;jar:<a href=\'http://www.xxx.yyy/jarfile.jar!/mypackage/myclass.class\'>http://www.xxx.yyy/jarfile.jar!/mypackage/myclass.class</a><br>&nbsp;&nbsp;The terminating !/ separator indicates that the URL refers to an<br>entire JAR file.<br>&nbsp;&nbsp;q<br>how do you access manifest file values<br>&nbsp;&nbsp;a<br>java.net.JarURLConnection uc = (JarURLConnection)u.openConnection();<br>java.util.jar.Attributes attr = uc.getMainAttributes();<br>String val = attr.getValue(Attributes.Name.MAIN_CLASS);<br>&nbsp;&nbsp;w /Attributes.java<br>/j2sdk1.4.0_01/src/java/util/jar/Attributes.java<br>/j2sdk1.4.0_01/src/javax/naming/directory/Attributes.java<br>/j2sdk1.4.0_01/src/org/xml/sax/Attributes.java<br>&nbsp;&nbsp;q<br>how to turn a set of classes into an extension<br>a<br>2<br>first bundle them in a JAR<br>1. installed extension: put jar in jre\'s lib/ext directory<br>2. download extension: refer to jar in the manifest of the<br>another JAR<br>&nbsp;&nbsp;q<br>where is jdbc code?<br>a<br>java.sql.*<br>q<br>java support for correctly handling dates, text,<br>decimal numbers for any locale<br>a<br>java.text.*<br>&nbsp;&nbsp;but currency: src/java/util/Currency.java<br>&nbsp;&nbsp;q<br>java bitmap support<br>a<br>java/util/BitSet.java<br>&nbsp;&nbsp;q<br>java: what should be subclassed when implementing a<br>comparison function for use with sorting<br>a<br>java/util/Comparator.java<br>q<br>why would it be troublesome if this class had<br>behavior inconsistent with equals?<br>&nbsp;&nbsp;a<br>some collection classes use \'equals\' in order to determine<br>uniqueness<br>q<br>play sound<br>a<br>AudioClip audioClip = Applet.getAudioClip(baseURL, relativeURL);<br>onceClip.play(); //Play it once.<br>loopClip.loop(); //Start the sound loop.<br>q<br>CORBA<br>a<br>it\'s rpc via object request brokers (ORBs)<br>q<br>some optional CORBA services<br>a<br>persistent objects<br>object directories<br>transaction processing<br>messaging<br>q<br>CORBA java connection code is generated<br>a<br>by the idltojava utility, now known as idlj<br>q<br>CORBA methods for persistence<br>a<br>object_to_string<br>string_to_object<br>&nbsp;&nbsp;q<br>thread will run until<br>&nbsp;&nbsp;a<br>A higher priority thread becomes runnable.<br>It yields, or its run method exits.<br>On systems that support time-slicing, its time allotment has expired.<br>q<br>are Java locks reentrant?<br>a<br>yes: Java runtime system allows a thread to re-acquire a lock<br>q<br>wake up all threads waiting on the object<br>a<br>object.notifyAll<br>&nbsp;&nbsp;q<br>object.wait<br>a<br>wait(long timeout)<br>wait(long timeout, int nanos)<br>&nbsp;&nbsp;q<br>Java: move a thread to a new group after the thread has been created.<br>a<br>impossible<br>q<br>java/lang/ThreadGroup properties<br>a<br>can be set and gotten, but generally do not directly affect threads<br>in the group which were already created<br>q<br>ThreadGroup methods which do affect<br>all threads in the group<br>a<br>!resume !stop !suspend<br>&nbsp;&nbsp;q<br>Java: create a single input stream from multiple input sources<br>a<br>java/io:<br>SequenceInputStream(Enumeration e)<br>SequenceInputStream(InputStream s1, InputStream s2)<br>q<br>Java: intercept data on a stream<br>a<br>use a filter stream associated with that stream<br>q<br>work with compressed data<br>a<br>java.util.zip.GZIPInputStream and GZIPOutputStream<br>ZipInputStream and ZipOutputStream<br>q<br>System properties: class path<br>a<br>java.class.path<br>q<br>System properties: Java installation directory<br>a<br>java.home<br>q<br>System properties: Java vendor-specific string<br>a<br>java.vendor<br>java.vendor.url<br>java.version<br>q<br>System properties: eoln<br>a<br>line.separator<br>q<br>System properties: Operating system architecture<br>a<br>os.arch<br>os.name<br>os.version<br>q<br>System properties: Path separator (for example, ":")<br>a<br>path.separator<br>q<br>System properties: User<br>a<br>current working directory: user.dir<br>user.home<br>user.name<br>&nbsp;&nbsp;q<br>call finalize() for all defunct objects<br>a<br>java.lang.System.runFinalization();<br>Before an object is garbage collected, the Java runtime system gives<br>the object a chance to clean up after itself. This step is known as<br>finalization and is achieved through a call to the object\'s finalize<br>method.<br>&nbsp;&nbsp;q<br>run garbage collector<br>a<br>java.lang.System.gc();<br>q<br>platform specific functionality<br>a<br>java.lang.Runtime<br>&nbsp;&nbsp;&nbsp;&nbsp;q<br>WAR file dir structure<br>&nbsp;&nbsp;a<br>c:/jwsdp-1_0_01/webapps/pipeline_app<br>c:/jwsdp-1_0_01/webapps/pipeline_app/index.html<br>c:/jwsdp-1_0_01/webapps/pipeline_app/images<br>c:/jwsdp-1_0_01/webapps/pipeline_app/images/tomcat.gif<br>c:/jwsdp-1_0_01/webapps/pipeline_app/WEB-INF<br>c:/jwsdp-1_0_01/webapps/pipeline_app/WEB-INF/web.xml<br>c:/jwsdp-1_0_01/webapps/pipeline_app/WEB-INF/classes<br>c:/jwsdp-1_0_01/webapps/pipeline_app/WEB-INF/classes/mypackage<br>c:/jwsdp-1_0_01/webapps/pipeline_app/WEB-INF/classes/mypackage/*.class<br>c:/jwsdp-1_0_01/webapps/pipeline_app/WEB-INF/lib<br>c:/jwsdp-1_0_01/webapps/pipeline_app/WEB-INF/lib/*.jar<br>&nbsp;&nbsp;q<br>how to make a WAR file?<br>a<br>jar<br>ant war<br>deploytool -- which also builds web.xml<br>&nbsp;&nbsp;q<br>must Descriptor elements appear in the dd<br>in a particular order?<br>&nbsp;&nbsp;a<br>yes: icon, display-name, description, distributable, context-param,<br>filter, filter-mapping, listener, servlet, servlet-mapping,<br>session-config,<br>mime-mapping, welcome-file-list, error-page, taglib, resource-envref,<br>resource-ref, security-constraint, login-config, security-role,<br>enventry.<br>&nbsp;&nbsp;q<br>from the Java point of view, what does the<br>WAR file correspond to?<br>&nbsp;&nbsp;a<br>the application context.<br>&nbsp;&nbsp;to set parameters for the application context, set<br>&nbsp;&nbsp;Web.xml:web-app/context-param OR<br>Web.xml:web-app/servlet/init-param<br>&nbsp;&nbsp;&nbsp;&nbsp;e.g.,<br>&nbsp;&nbsp;&lt;web-app&gt;<br>&lt;context-param&gt;<br>&lt;param-name&gt;<br>javax.servlet.jsp.jstl.fmt.localizationContext<br>&lt;/param-name&gt;<br>&lt;param-value&gt;messages.BookstoreMessages&lt;/param-value&gt;<br>&lt;/context-param&gt;<br>...<br>&lt;/web-app&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;q<br><a href=\'http://java.sun.com/webservices/docs/1.0/tutorial/doc/JavaWSTutorial.pdf\'>http://java.sun.com/webservices/docs/1.0/tutorial/doc/JavaWSTutorial.pdf</a><br>106<br>tomcat context?<br>a<br>is a name that gets mapped to a Web application; e.g., the context of<br>the Hello1 application is /hello1.<br>&nbsp;&nbsp;q<br>ant "install" task<br>a<br>The value of the war attribute can be<br>a WAR file jar:file:/path/to/bar.war!/ or<br>an unpacked directory file:/path/to/foo.<br>&nbsp;&nbsp;&lt;install url="url" path="mywebapp" war="file:build"<br>username="username" password="password" /&gt;<br>&nbsp;&nbsp;q<br>war attribute alternative<br>a<br>[normally The value of the war attribute is either a WAR file<br>jar:file:/path/to/bar.war!/ or an unpacked directory<br>file:/path/to/foo.]<br>&nbsp;&nbsp;config="file:build/context.xml"<br>&nbsp;&nbsp;where context.xml is<br>&nbsp;&nbsp;&lt;Context path="/bookstore1"<br>docBase="../docs/tutorial/examples/web/bookstore1/build"<br>debug="0"&gt;<br>&nbsp;&nbsp;The war setting can be derived from the docBase attribute<br>q<br>permanently deploy a tomcat application<br>a<br>1. ant "deploy" task-- note that this task requires a war file<br>(unlike the "install" task)<br>&nbsp;&nbsp;2. deploytool<br>&nbsp;&nbsp;3. cp war file or "Web application directory"(which is simply an<br>unpacked war file) to Webapps; restart tomcat<br>&nbsp;&nbsp;4. Copy a configuration file named mywebapp.xml containing a context<br>entry to &lt;JWSDP_HOME&gt;/webapps. The format is described in<br>$JWSDP_HOME/docs/tomcat/config/context.html; restart tomcat<br>q<br>110<br>ant task to update an application<br>a<br>reload<br>&nbsp;&nbsp;q<br>q<br>tomcat administration: operations<br>a<br>a<br>list<br>install/remove<br>reload<br>deploy/undeploy<br>start/stop<br>q<br>rm -rf c:/jwsdp-1_0_01/webapps/pipeline_app<br>cp -pr c:/jwsdp-1_0_01/docs/tomcat/appdev/pipeline_app/build c:/jwsdp-1_0_01/webapps/pipeline_app<br>&nbsp;&nbsp;perl -w c:/perl/bin/lwp-request -C \'x:\' \'http://localhost:8080/manager/install?path=/pipeline&war=file:C:&#092;&#092;jwsdp-1_0_01&#092;&#092;webapps&#092;&#092;pipeline_app\'<br>perl -w c:/perl/bin/lwp-request -C \'x:\' \'http://localhost:8080/manager/list\'|sed -n -e \'/myapp/p\' -e \'/pipeline/p\'<br>perl -w c:/perl/bin/lwp-request -C \'x:\' \'http://localhost:8080/manager/start?path=/pipeline\'<br>perl -w c:/perl/bin/lwp-request -C \'x:\' \'http://localhost:8080/manager/stop?path=/pipeline\'<br>perl -w c:/perl/bin/lwp-request -C \'x:\' \'http://localhost:8080/manager/remove?path=/pipeline\'<br>perl -w c:/perl/bin/lwp-request -C \'x:\' \'http://localhost:8080/manager/reload?path=/pipeline_app\'<br>b \'http://localhost:8080/pipeline_app\'<br>&nbsp;&nbsp;q<br>jsp: 2 approaches to internationalizing<br>a<br>1. separate version of the JSP page in each of the target locales and<br>have a controller servlet dispatch the request to the appropriate<br>page (depending on the requested locale).<br>&nbsp;&nbsp;2. extract locale-sensitive data into ResourceBundle\'s, and access<br>the data via the ResourceBundle\'s<br>&nbsp;&nbsp;q<br>setting up pointbase is described<br>&nbsp;&nbsp;a<br>116-119<br>&nbsp;&nbsp;q<br>133<br>error handling for JAXP SAX and DOM apps: what\'s the diff?<br>a<br>the same kinds of exceptions are generated, so they are identical.<br>&nbsp;&nbsp;q<br>Xalan v XSLTC<br>a<br>interpreting transformer (Xalan) v compiling transformer (XSLTC).<br>single-pass translation: Xalan tends to be slightly faster.<br>But when a transformation will be used multiple times XSLTC<br>&nbsp;&nbsp;q<br>Xalan has some advantages in functionality<br>&nbsp;&nbsp;&nbsp;&nbsp;a<br>support for SQL.<br>&nbsp;&nbsp;&nbsp;&nbsp;q<br>XSLTC optimizations<br>a<br>XSLTC caches Document-models and compiled stylesheets<br>&nbsp;&nbsp;By default, XSLTC inlines transformation code, which means that the<br>code responsible for translating an element contains the<br>transformation<br>code for all possible subelements of that element.<br>For small and medium-size stylesheets, that implementation produces<br>the<br>fastest possible code. However, complex stylesheets tend to produce<br>translets that are extremely large.<br>To solve that problem, XSLTC lets you disable inlining. To do that,<br>you<br>use the -n option when compiling XSLTC translets from the command<br>line. When generating an XSLTC transformer using a JAXP factory<br>class,<br>you use the factorys setAttribute() method to set the disableinlining<br>feature with code like this:<br>TransformerFactory tf = new TransformerFactory();<br>tf.setAttribute("disable-inlining", Boolean.TRUE);<br>&nbsp;&nbsp;q<br>384<br>can any class be used as a method parameter<br>or return type in JAX-RPC?<br>&nbsp;&nbsp;a<br>just about:<br>&nbsp;&nbsp;any class not descending from Remote, and which has a no-argument ctor<br>Simple types ok<br>&nbsp;&nbsp;q<br>JAXM Profiles<br>a<br>allow the ability to plug in additional protocols that are built on<br>top of SOAP. A JAXM provider implementation is not required to<br>implement features beyond what the SOAP 1.1 and SOAP with Attachments<br>specifications require, but it is free to incorporate other standard<br>protocols, called profiles, that are implemented on top of SOAP.<br>&nbsp;&nbsp;q<br>a JAXR provider implements two main packages: <br>a<br>javax.xml.registry, which consists of the API interfaces and classes<br>that define the registry access interface.<br>&nbsp;&nbsp;javax.xml.registry.infomodel, which consists of interfaces that<br>define the information model for JAXR.<br>&nbsp;&nbsp;q<br>b <a href=\'http://localhost:8080/admin/index.jsp\'>http://localhost:8080/admin/index.jsp</a><br>a<br>explain for each element on the screen what files or data structures are being updated (in c:/jwsdp-1_0_01/conf/server.xml)<br>q<br>StreamSource.setSystemId(File f)<br>&nbsp;&nbsp;a<br>[in javax/xml/transform/stream] ',
'id' => 14,
},
{
'A' => 'yes. For example, depending on the profile, a new SOAPMessage object<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;will come with certain headers already set. Also a profile<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;implementation may provide APIs that make it easier to create a<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;header and set its content. The JAXM reference implementation<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;includes APIs for both the ebXML and SOAP-RP profiles.<br>&nbsp;&nbsp;&nbsp;<font size=-1>SOAPPart</font><table border=1 cellpadding=0 cellspacing=0 width=100%><tr><td width=20%>pub_ void </td><td>-addMimeHeader(String name, String value)</td></tr><tr><td width=20%>pub_ Iterator </td><td>-getAllMimeHeaders()</td></tr><tr><td width=20%>pub_ Source </td><td>-getContent() throws SOAPException</td></tr><tr><td width=20%>pub_ SOAPEnvelope </td><td>-getEnvelope() throws SOAPException</td></tr><tr><td width=20%>pub_ Iterator </td><td>-getMatchingMimeHeaders(String[] names)</td></tr><tr><td width=20%>pub_ String[] </td><td>-getMimeHeader(String name)</td></tr><tr><td width=20%>pub_ Iterator </td><td>-getNonMatchingMimeHeaders(String[] names)</td></tr><tr><td width=20%>pub_ void </td><td>-removeAllMimeHeaders()</td></tr><tr><td width=20%>pub_ void </td><td>-removeMimeHeader(String header)</td></tr><tr><td width=20%>pub_ void </td><td>-setContent(Source source) throws SOAPException</td></tr><tr><td width=20%>pub_ void </td><td>-setMimeHeader(String name, String value)</td></tr><tr><td width=20%>pub_ String </td><td>getContentId()</td></tr><tr><td width=20%>pub_ String </td><td>getContentLocation()</td></tr><tr><td width=20%>pub_ void </td><td>setContentId(String contentId)</td></tr><tr><td width=20%>pub_ void </td><td>setContentLocation(String contentLocation)</td></tr>q</table><br><font size=-1>Source</font><table border=1 cellpadding=0 cellspacing=0 width=100%><tr><td width=20%> pub_ String </td><td>getSystemId()</td></tr><tr><td width=20%> pub_ void </td><td>setSystemId(String systemId)</td></tr>SOAPMessage.saveChanges()aThe method <code>saveChanges</code> also generates any changes thatcan be read back (for example, a MessageId in profiles that support amessage id).All MIME headers in a message that is created for sending purposesare guaranteed to have valid values only after<code>saveChanges</code> has been called.In addition, this method marks the point at which the data from allconstituent <code>AttachmentPart</code> objects are pulled into themessage.This method is called automatically when a message is sent or writtento by the methods <code>ProviderConnection.send</code>,<code>SOAPConnection.call</code>, or<code>SOAPMessage.writeTo</code>.However, if changes are made to a message that was received or to onethat has already been sent, the method <code>saveChanges</code> needsto be called explicitly in order to save the changes.qjava.class.pathaSystem properties: class pathqjava.homeaSystem properties: Java installation directoryqline.separatoraSystem properties: eolnqos.archaSystem properties: Operating system architectureos.nameos.versionqpath.separatoraSystem properties: Path separator (for example, ":")qtell URL to use the default port for the protocol.aport = -1qin a url, express a 6-octet IP @a"IPv6" literal address: enclose in []qwhat do you call "#chapter1" in <a href=\'http://java.sun.com/index.html#chapter1?\'>http://java.sun.com/index.html#chapter1?</a>a"fragment", also known as a"ref" or a"reference".The fragment is not technically part of the URL. Rather, it indicates that after the specified resource is retrieved, the application is specifically interested in that part of the document that has the tag <code>chapter1</code> attached to it. The meaning of a tag is resource specific.qhow do you add content to a SOAPFaultElement?ause SOAPElement.addTextNodeqSOAPElement</table><br><font size=-1>Object</font><br>&nbsp;&nbsp;<font size=-1>Node</font><br><font size=-1>SOAPElement</font><br>&nbsp;&nbsp;<font size=-1>DetailEntry</font><br>&nbsp;&nbsp;<font size=-1>SOAPBody</font><br>&nbsp;&nbsp;<font size=-1>SOAPBodyElement</font><br>&nbsp;&nbsp;&nbsp;&nbsp;<font size=-1>SOAPFault</font><br>&nbsp;&nbsp;<font size=-1>SOAPEnvelope</font><br>&nbsp;&nbsp;&nbsp;&nbsp;<font size=-1>Envelope</font><br>&nbsp;&nbsp;<font size=-1>SOAPFaultElement</font><br>&nbsp;&nbsp;&nbsp;&nbsp;<font size=-1>Detail</font><br>&nbsp;&nbsp;<font size=-1>SOAPHeader</font><br>&nbsp;&nbsp;<font size=-1>SOAPHeaderElement</font><br><font size=-1>Object</font><table border=1 cellpadding=0 cellspacing=0 width=100%><tr><td width=20%> priv native void </td><td>@registerNatives()</td></tr><tr><td width=20%> prot native Object </td><td>clone() throws CloneNotSupportedException</td></tr><tr><td width=20%> pub_ boolean </td><td>equals(Object obj)</td></tr><tr><td width=20%> prot void </td><td>finalize() throws Throwable</td></tr><tr><td width=20%> pub_ final native Class </td><td>getClass()</td></tr><tr><td width=20%> pub_ native int </td><td>hashCode()</td></tr><tr><td width=20%> pub_ final native void </td><td>notify()</td></tr><tr><td width=20%> pub_ final native void </td><td>notifyAll()</td></tr><tr><td width=20%> pub_ String </td><td>toString()</td></tr><tr><td width=20%> pub_ final void </td><td>wait() throws InterruptedException</td></tr><tr><td width=20%> pub_ final native void </td><td>wait(long timeout) throws InterruptedException</td></tr><tr><td width=20%> pub_ final void </td><td>wait(long timeout, int nanos) throws InterruptedException</td></tr></table><br>&nbsp;&nbsp;<font size=-1>Node</font><table border=1 cellpadding=0 cellspacing=0 width=100%><tr><td width=20%> pub_ Node </td><td>appendChild(Node newChild)</td></tr><tr><td width=20%> pub_ Node </td><td>cloneNode(boolean deep)</td></tr><tr><td width=20%> pub_ NamedNodeMap </td><td>getAttributes()</td></tr><tr><td width=20%> pub_ NodeList </td><td>getChildNodes()</td></tr><tr><td width=20%> pub_ Node </td><td>getFirstChild()</td></tr><tr><td width=20%> pub_ Node </td><td>getLastChild()</td></tr><tr><td width=20%> pub_ String </td><td>getLocalName()</td></tr><tr><td width=20%> pub_ String </td><td>getNamespaceURI()</td></tr><tr><td width=20%> pub_ Node </td><td>getNextSibling()</td></tr><tr><td width=20%> pub_ String </td><td>getNodeName()</td></tr><tr><td width=20%> pub_ short </td><td>getNodeType()</td></tr><tr><td width=20%> pub_ String </td><td>getNodeValue()</td></tr><tr><td width=20%> pub_ Document </td><td>getOwnerDocument()</td></tr><tr><td width=20%> pub_ Node </td><td>getParentNode()</td></tr><tr><td width=20%> pub_ String </td><td>getPrefix()</td></tr><tr><td width=20%> pub_ Node </td><td>getPreviousSibling()</td></tr><tr><td width=20%> pub_ boolean </td><td>hasAttributes()</td></tr><tr><td width=20%> pub_ boolean </td><td>hasChildNodes()</td></tr><tr><td width=20%> pub_ Node </td><td>insertBefore(Node newChild, Node refChild)</td></tr><tr><td width=20%> pub_ boolean </td><td>isSupported(String feature, String version)</td></tr><tr><td width=20%> pub_ void </td><td>normalize()</td></tr><tr><td width=20%> pub_ Node </td><td>removeChild(Node oldChild)</td></tr><tr><td width=20%> pub_ Node </td><td>replaceChild(Node newChild, Node oldChild)</td></tr><tr><td width=20%> pub_ void </td><td>setNodeValue(String nodeValue)</td></tr><tr><td width=20%> pub_ void </td><td>setPrefix(String prefix)</td></tr></table><br><font size=-1>SOAPElement</font><table border=1 cellpadding=0 cellspacing=0 width=100%><tr><td width=20%> pub_ SOAPElement </td><td>addAttribute(Name name, String value)</td></tr><tr><td width=20%> pub_ SOAPElement </td><td><font color=red>addChildElement(Name name)</font> throws SOAPException</td></tr><tr><td width=20%> pub_ SOAPElement </td><td>addChildElement(SOAPElement element)</td></tr><tr><td width=20%> pub_ SOAPElement </td><td>addChildElement(String localName) throws SOAPException</td></tr><tr><td width=20%> pub_ SOAPElement </td><td>addChildElement(String localName, String prefix)</td></tr><tr><td width=20%> pub_ SOAPElement </td><td>addChildElement(String localName, String prefix, String uri)</td></tr><tr><td width=20%> pub_ SOAPElement </td><td>addNamespaceDeclaration(String prefix, String uri)</td></tr><tr><td width=20%> pub_ SOAPElement </td><td>addTextNode(String text) throws SOAPException</td></tr><tr><td width=20%> pub_ Iterator </td><td>getAllAttributes()</td></tr><tr><td width=20%> pub_ String </td><td>getAttributeValue(Name name)</td></tr><tr><td width=20%> pub_ Iterator </td><td>getChildElements()</td></tr><tr><td width=20%> pub_ Iterator </td><td>getChildElements(Name name)</td></tr><tr><td width=20%> pub_ Name </td><td>getElementName()</td></tr><tr><td width=20%> pub_ String </td><td>getEncodingStyle()</td></tr><tr><td width=20%> pub_ Iterator </td><td>getNamespacePrefixes()</td></tr><tr><td width=20%> pub_ String </td><td>getNamespaceURI(String prefix)</td></tr><tr><td width=20%> pub_ boolean </td><td>removeAttribute(Name name)</td></tr><tr><td width=20%> pub_ boolean </td><td>removeNamespaceDeclaration(String prefix)</td></tr><tr><td width=20%> pub_ void </td><td>setEncodingStyle(String encodingStyle)</td></tr></table><br>&nbsp;&nbsp;<font size=-1>DetailEntry</font><br>&nbsp;&nbsp;<font size=-1>SOAPBody</font><table border=1 cellpadding=0 cellspacing=0 width=100%><tr><td width=20%> pub_ </td><td>SOAPBody()</td></tr><tr><td width=20%> pub_ QName </td><td>getElementName()</td></tr><tr><td width=20%> pub_ String </td><td>getEncodingStyle()</td></tr><tr><td width=20%> pub_ String </td><td>getNamespace()</td></tr><tr><td width=20%> pub_ String </td><td><font color=red>getParts()</font></td></tr><tr><td width=20%> pub_ SOAPUse </td><td>getUse()</td></tr><tr><td width=20%> pub_ boolean </td><td>isEncoded()</td></tr><tr><td width=20%> pub_ boolean </td><td>isLiteral()</td></tr><tr><td width=20%> pub_ void </td><td>setEncodingStyle(String s)</td></tr><tr><td width=20%> pub_ void </td><td>setNamespace(String s)</td></tr><tr><td width=20%> pub_ void </td><td><font color=red>setParts(String s)</font></td></tr><tr><td width=20%> pub_ void </td><td>setUse(SOAPUse u)</td></tr><tr><td width=20%> pub_ void </td><td>validateThis()</td></tr></table><br>&nbsp;&nbsp;<font size=-1>SOAPBodyElement</font><br>&nbsp;&nbsp;&nbsp;&nbsp;<font size=-1>SOAPFault</font><table border=1 cellpadding=0 cellspacing=0 width=100%><tr><td width=20%> pub_ </td><td>SOAPFault()</td></tr><tr><td width=20%> pub_ QName </td><td>getElementName()</td></tr><tr><td width=20%> pub_ String </td><td>getEncodingStyle()</td></tr><tr><td width=20%> pub_ String </td><td>getNamespace()</td></tr><tr><td width=20%> pub_ SOAPUse </td><td>getUse()</td></tr><tr><td width=20%> pub_ boolean </td><td>isEncoded()</td></tr><tr><td width=20%> pub_ boolean </td><td>isLiteral()</td></tr><tr><td width=20%> pub_ void </td><td>setEncodingStyle(String s)</td></tr><tr><td width=20%> pub_ void </td><td>setNamespace(String s)</td></tr><tr><td width=20%> pub_ void </td><td>setUse(SOAPUse u)</td></tr><tr><td width=20%> pub_ void </td><td>validateThis()</td></tr></table><br>&nbsp;&nbsp;<font size=-1>SOAPEnvelope</font><table border=1 cellpadding=0 cellspacing=0 width=100%><tr><td width=20%> pub_ Name </td><td>-createName(String localName)</td></tr><tr><td width=20%> pub_ Name </td><td>-createName(String localName, String prefix, String uri)</td></tr><tr><td width=20%> pub_ SOAPBody </td><td><font color=red>addBody()</font> throws SOAPException</td></tr><tr><td width=20%> pub_ SOAPHeader </td><td><font color=red>addHeader()</font> throws SOAPException</td></tr><tr><td width=20%> pub_ SOAPBody </td><td>getBody() throws SOAPException</td></tr><tr><td width=20%> pub_ SOAPHeader </td><td>getHeader() throws SOAPException</td></tr></table><br>&nbsp;&nbsp;&nbsp;&nbsp;<font size=-1>Envelope</font><table border=1 cellpadding=0 cellspacing=0 width=100%><tr><td width=20%> <font color=red>Source </td><td>getContent()</font></td></tr><tr><td width=20%> void </td><td>output(OutputStream out) throws IOException</td></tr></table><br>&nbsp;&nbsp;<font size=-1>SOAPFaultElement</font><br>&nbsp;&nbsp;&nbsp;&nbsp;<font size=-1>Detail</font><table border=1 cellpadding=0 cellspacing=0 width=100%><tr><td width=20%> pub_ DetailEntry </td><td>addDetailEntry(Name name) throws SOAPException</td></tr><tr><td width=20%> <font color=red>pub_ Iterator </td><td>getDetailEntries()</font></td></tr></table><br>&nbsp;&nbsp;<font size=-1>SOAPHeader</font><table border=1 cellpadding=0 cellspacing=0 width=100%><tr><td width=20%> pub_ </td><td>SOAPHeader()</td></tr><tr><td width=20%> pub_ void </td><td><font color=red>accept(ExtensionVisitor visitor)</font> throws Exception</td></tr><tr><td width=20%> pub_ void </td><td>add(SOAPHeaderFault fault)</td></tr><tr><td width=20%> pub_ QName </td><td>getElementName()</td></tr><tr><td width=20%> pub_ String </td><td>getEncodingStyle()</td></tr><tr><td width=20%> pub_ QName </td><td>getMessage()</td></tr><tr><td width=20%> pub_ String </td><td>getNamespace()</td></tr><tr><td width=20%> pub_ String </td><td>getPart()</td></tr><tr><td width=20%> pub_ SOAPUse </td><td>getUse()</td></tr><tr><td width=20%> pub_ boolean </td><td>isEncoded()</td></tr><tr><td width=20%> pub_ boolean </td><td>isLiteral()</td></tr><tr><td width=20%> pub_ void </td><td>setEncodingStyle(String s)</td></tr><tr><td width=20%> pub_ void </td><td>setMessage(QName message)</td></tr><tr><td width=20%> pub_ void </td><td>setNamespace(String s)</td></tr><tr><td width=20%> pub_ void </td><td><font color=red>setPart(String s)</font></td></tr><tr><td width=20%> pub_ void </td><td>setUse(SOAPUse u)</td></tr><tr><td width=20%> pub_ void </td><td>validateThis()</td></tr><tr><td width=20%> pub_ void </td><td>withAllQNamesDo(QNameAction action)</td></tr><tr><td width=20%> pub_ void </td><td>withAllSubEntitiesDo(EntityAction action)</td></tr></table><br>&nbsp;&nbsp;<font size=-1>SOAPHeaderElement</font><table border=1 cellpadding=0 cellspacing=0 width=100%><tr><td width=20%> pub_ String </td><td><font color=red>getActor()</font></td></tr><tr><td width=20%> pub_ boolean </td><td>getMustUnderstand()</td></tr><tr><td width=20%> pub_ void </td><td><font color=red>setActor(String actorURI)</font></td></tr><tr><td width=20%> pub_ void </td><td><font color=red>setMustUnderstand(boolean mustUnderstand)</font></td></tr>jaxp: how can you find out which what entities are not being recognized?avoid org.xml.sax.helpers.DefaultHandler.skippedEntity(String name)qorg/w3c/dom/Node.normalize()aPuts all <code>Text</code> nodes in the full depth of the sub-tree underneath this <code>Node</code>, including attribute nodes, into a "normal" form where <font color=red>only structure</font> (e.g., elements, comments, processing instructions, CDATA sections, and entity references) <font color=red>separates <code>Text</code> nodes, i.e., there are neither adjacent <code>Text</code> nodes nor empty <code>Text</code> nodes</font>. This can be used to ensure that the DOM view of a document is the same as if it were saved and re-loaded, and is useful when operations (such as XPointer lookups) that depend on a particular document tree structure are to be used. In cases where the document contains <code>CDATASections</code>, <font color=red>the normalize operation alone may not be sufficient, since XPointers do not differentiate between <code>Text</code> nodes and <code>CDATASection</code> nodes</font>.qxml: qNameaincludes the namespace prefix. usually what you want is localNameqwhat do we use for our DOM, normally?aorg/w3c/dom/Document.javaqSAXaSimple API for XMLqAddress address = (Address)JXPathContext.newContext(vendor).getValue("locations[address/zipCode=\'90210\']/address");equvalent Java code:aAddress address = null;Collection locations = vendor.getLocations();Iterator it = locations.iterator();while (it.hasNext())&#123; Location location = (Location)it.next(); String zipCode = location.getAddress().getZipCode(); if (zipCode.equals("90210"))&#123; address = location.getAddress(); break; &#125;&#125;<a href=\'http://jakarta.apache.org/commons/jxpath/\'>http://jakarta.apache.org/commons/jxpath/</a>qpublic class Employee &#123;<tr><td width=20%> public Address</td><td>getHomeAddress()&#123;</td></tr> ... &#125;&#125;public class Address &#123;<tr><td width=20%> public String</td><td>getStreetNumber()&#123;</td></tr> ... &#125;&#125;<tr><td width=20%>Employee emp = new</td><td>Employee();</td></tr>JXPathContext context = JXPathContext.newContext(emp);String sNumber = (String)context.getValue("homeAddress/streetNumber"); // equivalent Javaaemp.getHomeAddress().getStreetNumber();<a href=\'http://jakarta.apache.org/commons/jxpath/\'>http://jakarta.apache.org/commons/jxpath/</a>qjsp error pageaqjaxr transformer factory classesa</table><br>&nbsp;<font size=-1>TransformerFactory</font><table border=1 cellpadding=0 cellspacing=0 width=100%><tr><td width=20%>pub_ Source </td><td>-getAssociatedStylesheet( Source source, String media, String title, String charset)</td></tr><tr><td width=20%>pub_ Object </td><td>-getAttribute(String name)</td></tr><tr><td width=20%>pub_ ErrorListener </td><td>-getErrorListener()</td></tr><tr><td width=20%>pub_ boolean </td><td>-getFeature(String name)</td></tr><tr><td width=20%>pub_ URIResolver </td><td>-getURIResolver()</td></tr><tr><td width=20%>pub_ Templates </td><td>-newTemplates(Source source)</td></tr><tr><td width=20%>pub_ Transformer </td><td>-newTransformer()</td></tr><tr><td width=20%>pub_ Transformer </td><td>-newTransformer(Source source)</td></tr><tr><td width=20%>pub_ void </td><td>-setAttribute(String name, Object value)</td></tr><tr><td width=20%>pub_ void </td><td>-setErrorListener(ErrorListener listener)</td></tr><tr><td width=20%>pub_ void </td><td>-setURIResolver(URIResolver resolver)</td></tr><tr><td width=20%>pub_ TransformerFactory </td><td>@newInstance()</td></tr><tr><td width=20%>prot </td><td>TransformerFactory()</td></tr></table><br><font size=-1>SAXTransformerFactory</font><table border=1 cellpadding=0 cellspacing=0 width=100%><tr><td width=20%>pub_ TemplatesHandler </td><td>-newTemplatesHandler()</td></tr><tr><td width=20%>pub_ TransformerHandler </td><td>-newTransformerHandler( Templates templates) throws TransformerConfigurationException</td></tr><tr><td width=20%>pub_ TransformerHandler </td><td>-newTransformerHandler()</td></tr><tr><td width=20%>pub_ TransformerHandler </td><td>-newTransformerHandler(Source src)</td></tr><tr><td width=20%>pub_ XMLFilter </td><td>-newXMLFilter(Source src)</td></tr><tr><td width=20%>pub_ XMLFilter </td><td>-newXMLFilter(Templates templates)</td></tr><tr><td width=20%>prot </td><td>SAXTransformerFactory()</td></tr>q@@a@@q@@a@@q@@a@@q@@a@@q@@a@@q@@a@@q@@a@@q@@a@@q@@a@@</table> ',
'Q' => 'q<br>may a messaging provider support multiple profiles?<br>&nbsp;&nbsp;&nbsp;&nbsp;a<br>yes, but an application can use only one at a time and must have a<br>prior agreement with each of the parties to whom it sends messages<br>about what profile is being used.<br>q<br>jaxm: do profiles affect a message\'s headers?<br>&nbsp;&nbsp;a ',
'id' => 15,
},
);
